{# The statistics table for the top of the summary table #}
{% macro stats_table(stats, global_stats) -%}
|align="right"|{{stats.number}}
|align="right"|{{'{:,d}'.format(stats.population)}}
|align="right"|{{"{:5.2f}".format(stats.population / (global_stats.population / 100.0)) }}%
|align="right"|{{'{:,d}'.format(stats.economy)}}
|align="right"|{{'{:,d}'.format(stats.percapita)}}
|align="right"|{{'{:,d}'.format(stats.sum_ru)}}
|align="right"|{{'{:,d}'.format(stats.tradeVol // (10**9))}}
|align="right"|{{'{:,d}'.format(stats.trade // (10**9))}}
|align="right"|{{'{:,d}'.format(stats.tradeExt // (10**9))}}
|align="right"|{{'{:,d}'.format(stats.shipyards)}}
|align="right"|{{'{:,.2f}'.format(stats.col_be)}}
|align="right"|{{'{:,d}'.format(stats.passengers // 1000000)}}
|align="right"|{{'{:,d}'.format(stats.spa_people)}}
{% endmacro -%}

{# The basic long text description of the area (galaxy, subsector, sector) #}
{% macro text_area_long(area_type, area, plural) -%}
{{ economy(plural, area, area_type, None) }}
{%- if area.stats.number > 0 %}

{% if area_type == 'subsector' -%}
{{area.wiki_name()}}, {{area_type}} {{area.position}} of {{area.sector.wiki_name()}}
{%- else -%}
The {{area.wiki_name()}} {{area_type}}
{%- endif %} contains {{ get_count(plural, area.stats.stars, 'star') }} and {{ get_count(plural, area.stats.worlds, 'identified planet') }};
{{get_count(plural, area.stats.star_count.get(1, 0), 'monostellar system') }}, {{ get_count(plural, area.stats.star_count.get(2,0), 'binary system') }}, {{get_count(plural, area.stats.star_count.get(3, 0), 'trinary system') }}, and
{{get_count(plural, area.stats.star_count.get(4, 0) + area.stats.star_count.get(5, 0) + area.stats.star_count.get(6,0), 'system')}} with four or more stars.
{{area.stats.gg_count}} of the {{ get_count(plural, area.stats.number, 'system') }} ({{((area.stats.gg_count/area.stats.number)*100)|int}}%) have native gas giants.
There are {{get_count(plural, area.stats.code_counts.get('As', 0), 'belt',  ' [[Asteroid Belt World|Asteroid]] (As)') }},
{{ get_count(plural, area.stats.code_counts.get('De', 0), 'world', ' [[Desert World|Desert]] (De)') }},
{{ get_count(plural, area.stats.code_counts.get('Ga', 0), 'world', ' [[Garden World|Garden]] (Ga)') }},
{{ get_count(plural, area.stats.code_counts.get('Ic', 0), 'world', ' [[Ice World|Ice-capped]] (Ic)') }},
{{ get_count(plural, area.stats.code_counts.get('Po', 0), 'world', ' [[Poor World|Poor]] (Po)') }},
{{ get_count(plural, area.stats.code_counts.get('Va', 0), 'world', ' [[Vacuum World|Vacuum]] (Va)') }}, and
{{ get_count(plural, area.stats.code_counts.get('Wa', 0) + area.stats.code_counts.get('Oc', 0), 'world', ' [[Water World|Water]] (Wa) or [[Ocean World|Ocean]] (Oc)') }}.
{%- endif %}

{{area.wiki_name()}} {{ population_text(plural, area) }}
{%- if area_type == 'subsector' -%}{{ population_groups(plural, area, area.sector.name) }}{%- else -%}{{ population_groups(plural, area, area.name) }}{%- endif -%}
{%- endmacro -%}

{# The top level statistics for the allegiances, similar to above #}
{%- macro allegiance_statistics(plural, area) -%}
{%- for allegiance in area.alg_sorted %}
==== {{ allegiance.name }} ====
{% if allegiance.is_unclaimed() -%}
There are {{ get_count(plural, allegiance.stats.number, 'system', 'unclaimed or unexplored') }} in {{ area.wiki_name() }}.
{% elif allegiance.is_wilds() -%}
There are {{ get_count (plural, allegiance.stats.number, '') }} {{ allegiance.wiki_name() }} worlds in {{ area.wiki_name() }} {{ text_area_population(plural, allegiance) }}.
{% elif allegiance.is_client_state() -%}
The {{ allegiance.wiki_name() }} in {{ area.wiki_name() }} encompasses {{ world_counts(plural, allegiance, area)}} {{ text_area_population(plural, allegiance) }}.
{%  else -%}
{{ economy(plural, allegiance, 'allegiance', area) }}

The {{ allegiance.wiki_name() }} {{ population_text(plural, allegiance) }}
{{ allegiance_capitals_text (allegiance) }}
{%- endif -%}
{%- endfor -%}
{%- endmacro -%}

{%- macro top_level_summary(global_stats, sectors) -%}
{| class="wikitable"
| Sectors || {{ sectors.values() | count }} 
|-
| Systems ||  {{'{:,d}'.format(global_stats.number)}} 
|-
| Population || {{'{:,d}'.format(global_stats.population)}} million
|-
| Gross Total Product ||  BCr{{'{:,d}'.format(global_stats.economy)}} 
|-
| Per capita GSP || Cr{{'{:,d}'.format(global_stats.percapita)}}
|-
| Trade || BCr{{'{:,d}'.format(global_stats.trade // (10**9))}} 
|}
{%- endmacro -%}


{% macro allegiance_capitals_text(aleg) -%}
{%- set capital_count = (aleg.stats.otherCp + aleg.stats.sectorCp + aleg.stats.subsectorCp) | count -%}
{%- if capital_count < 4 -%}
{%- for world in aleg.stats.otherCp %}
* The capital of {{ aleg.wiki_name() }} is {{ world.wiki_name() }}.
{%- endfor -%}
{%- for world in aleg.stats.sectorCp %}
* The {{aleg.wiki_name() }} sector capital is {{ world.wiki_name() }}.
{%- endfor -%}
{%- for world in aleg.stats.subsectorCp %}
* The {{aleg.wiki_name() }} subsector capital of {{ world.sector.subsectors[world.subsector()].wiki_name() }} is {{ world.wiki_name() }}
{%- endfor -%}
{%- else -%}
{{'{{'}}NavigationBox
 |Title={{aleg.wiki_name()}} capitals
 |Image=
 |Category=
 |List = <div style="text-align: left;font-size: 90%; padding: 0.5em 1em; -webkit-column-count: 2; -moz-column-count: 2; column-count: 2;">
{%- for world in aleg.stats.otherCp %}
* Capital {{ world.wiki_name() }}.
{%- endfor -%}
{%- for world in aleg.stats.sectorCp %}
* Sector capital is {{ world.wiki_name() }}.
{%- endfor -%}
{%- for world in aleg.stats.subsectorCp %}
* {{ world.sector.subsectors[world.subsector()].wiki_name() }} subsector capital is {{ world.wiki_name() }}
{%- endfor -%}
</div>{{'}}'}}
{%- endif -%}
{%- endmacro -%}

{# Macros to aid in the processing above #}

{%- macro text_area_population(plural, area) -%}
with an estimated population of {{ population(area.stats.population) }}
{%- endmacro -%}

{%- macro population (population) -%}
{%- if population >= 1000 -%}
{{ '{:,d}'.format(population // 1000) }} billion
{%- elif population >= 1 -%}
{{ '{:,d}'.format(population) }} million
{%- elif population < 0 -%}
extinct
{%- else -%}
less than 1 million
{%- endif -%}
{%- endmacro -%}

{%- macro get_count(plural, count, text, lead_text="") -%}
{%- set count = plural.num(count) -%}
{%- set c_text = plural.number_to_words(count, zero='no', threshold=10) -%}
{%- if text -%}
{{ plural.inflect("{0}{1} plural('{2}')".format(c_text, lead_text, text)) }}
{%- else -%}
{{ plural.inflect("{0}{1}".format(c_text, lead_text)) }}
{%- endif -%}
{%- endmacro -%}

{%- macro high_pop_worlds(plural, area)-%}
{%-set high_pop = plural.num(area.stats.high_pop_worlds_count()) -%}
The highest population {{plural.inflect("plural('world') plural_verb('is')") }} {{ plural.join( area.stats.high_pop_worlds_list()) }}.
{%- endmacro -%}

{%- macro high_tech_worlds(plural, area) -%}
{%- set high_tech = plural.num(area.stats.high_tech_worlds_count()) -%}
The highest technology level is {{area.stats.maxTL}} at {{plural.join(area.stats.high_tech_worlds_list())}}.
{%- endmacro -%}

{%- macro world_counts(plural, area, contain) -%}
{%- if contain and contain.stats.number == area.stats.number -%}all of the worlds
{%- elif area.worlds -%}{{ get_count(plural, area.stats.number, 'world') }}
{%- else -%}no charted worlds
{%- endif -%}
{%- endmacro -%}


{%- macro economy(plural, area, area_type, contain) -%}
{%- if area_type == 'allegiance' -%}
The {{ area.wiki_name() }} has jurisdiction over {{ world_counts(plural, area, contain) }}
{%- elif area_type == 'subsector' -%}
{{area.wiki_name()}}, {{area_type}} {{area.position}} of {{area.sector.wiki_name()}} contains {{ world_counts(plural, area) }}
{%- else -%}
The {{area.wiki_name()}} {{area_type}} has {{ world_counts(plural, area) }}
{%- endif -%}
{%- if area.worlds %} {{ text_area_population(plural, area) }}, a per capita income of Cr{{ '{:,d}'.format(area.stats.percapita ) }}, and a total economy is BCr{{ '{:,d}'.format(area.stats.economy) }}.
{%- if area.stats.tradeVol > 0 %} These worlds originate an interstellar trade of BCr{{ '{:,d}'.format(area.stats.tradeVol // (10**9)) }} through
{{area.stats.port_size['A'] + area.stats.port_size['B'] + area.stats.port_size['C'] + area.stats.port_size['D']}} [[starport]]s
({{area.stats.port_size['A']}} [[Class A Starport|Class A]], {{area.stats.port_size['B']}} [[Class B Starport|Class B]], {{area.stats.port_size['C']}} [[Class C Starport|Class C]], {{area.stats.port_size['D']}} [[Class D Starport|Class D]])
employing {{'{:,d}'.format(area.stats.spa_people)}} people. Driving this interstellar trade {% else %} Driving this economy
{%- endif %} are
{{ get_count(plural, area.stats.code_counts.get('Ag', 0), 'world', ' [[Agricultural World|Agricultural]] (Ag)') }},
{{ get_count(plural, area.stats.code_counts.get('Na', 0), 'world', ' [[Nonagricultural World|Non-Agricultural]] (Na)') }},
{{ get_count(plural, area.stats.code_counts.get('Pa', 0), 'world', ' Pre-Agricultural (Pa)') }},
{{ get_count(plural, area.stats.code_counts.get('Pi', 0), 'world', ' Pre-Industrial (Pi)') }},
{{ get_count(plural, area.stats.code_counts.get('Ri', 0), 'world', ' [[Rich World|Rich]] (Ri)') }}, and
{{ get_count(plural, area.stats.code_counts.get('In', 0), 'world', ' [[Industrial World|Industrial]] (In)') }}. {{ bases(plural, area.stats.bases, area) }}
{%- if area.stats.TLmean > 0 %} The average [[Technology Level|technology level]] is {{area.stats.TLmean|int}} (with most between {{[area.stats.TLmean - area.stats.TLstddev,0]|max|int}} and {{(area.stats.TLmean + area.stats.TLstddev)|int}}).
{{ high_tech_worlds(plural, area) }}
{%- endif -%}{%-else-%}.{%- endif -%}
{%- endmacro %}

{%- macro uwp_table(table_name, uwp_code, global_stats) -%}
{| class="wikitable"
|+ colspan=3 style="text-align:center" | {{ table_name }}
! Code !! Count !! % by Pop !! Per Capita
{%- for code,stats in uwp_code | dictsort %}
|-
| {{ code }} || {{stats.number}} 
| {%- if global_stats.population > 0 -%} {{ "{:5.2f}".format(stats.population / (global_stats.population / 100.0)) }}% {%- else -%} 0% {%- endif %}
| {{ stats.percapita }}
{%- endfor %}
|}
{%- endmacro -%}

{%- macro population_text(plural, area) -%}
{% if area.stats.population > 0 %}has an estimated population of {{population(area.stats.population)}} distributed across
{{ get_count(plural, area.stats.code_counts.get('Hi', 0), 'world', ' High population (Hi)') }},
{{ get_count(plural, area.stats.code_counts.get('Ph', 0), 'world', ' Moderate population (Ph)') }},
{{ get_count(plural, area.stats.code_counts.get('Ni', 0), 'world', ' Non-industrial (Ni)') }},
{{ get_count(plural, area.stats.code_counts.get('Lo', 0), 'world', ' Low population (Lo)') }}, and
{{ get_count(plural, area.stats.code_counts.get('Ba', 0), 'world', ' Barren (Ba)') }}.
{{ high_pop_worlds(plural, area) }} The population consists of {{ get_count(plural, area.stats.populations_count(), 'sophont group') }}
{%- if area.stats.homeworld_count() > 0 %} including {{ get_count(plural, area.stats.homeworld_count(), 'sophont', ' [[Native Intelligent Life|native]]') }}{%- endif -%}.
{%- else -%}
has no inhabitants.
{%- endif -%}
{%- endmacro %}

{%- macro population_groups(plural, area, sophont_sector) -%}
{%- if area.stats.populations -%}
{{'{{'}}NavigationBox
 |Title={{area.stats.populations | count}} identified sophont populations in {{ area.name }}
 |Image=
 |Category=
 |List = <div style="text-align: left;font-size: 90%; padding: 0.5em 1em; -webkit-column-count: 2; -moz-column-count: 2; column-count: 2;">
{%- for code, pop in area.stats.populations | dictsort(by='value', reverse=True) %}
* {{'{{'}}SophontCode|{{code}}{%- if pop.homeworlds -%}|{{sophont_sector}}{%- endif -%}{{'}}'}}: {{population(pop.population)}} on
{%- if pop.homeworlds %} their homeworld{% if pop.count > 1 %} and {{ get_count(plural, pop.count - 1, 'world') }}{%- endif -%}
{%- else %} {{ get_count(plural, pop.count, 'world') }}{% endif -%}.
{%- endfor -%}
</div>{{'}}'}}
{%- endif -%}
{%- endmacro -%}

{%- macro bases(plural, bases, area) -%}
{%- if bases -%}
The governments in {{ area.name }} maintain
{%- for base, count in bases | dictsort(by='value', reverse=True) -%}
{%- if loop.last and loop.length > 1 %} and{%- endif %} {{ get_count(plural, count, base) }}{%- if not loop.last -%},{%- endif -%}
{%- endfor %}. {% endif -%}
{%- endmacro -%}
